
bin/Debug/usart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001a8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000c0c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c4a  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  6c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 ea       	ldi	r30, 0xA8	; 168
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 31       	cpi	r26, 0x14	; 20
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>
  92:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  96:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>
#include "UART.h"

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
    initUSART(9600);
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	95 e2       	ldi	r25, 0x25	; 37
  aa:	0e 94 5c 00 	call	0xb8	; 0xb8 <initUSART>
    printString("USART is working!!");
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 a9 00 	call	0x152	; 0x152 <printString>

    while(1)
    {
        ;
    }
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x18>

000000b8 <initUSART>:
#include <avr/io.h>
#include "UART.h"
void initUSART( unsigned int ubrr )
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <initUSART+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
/* Set baud rate */
UBRR0H = (unsigned char)(ubrr>>8);
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	29 81       	ldd	r18, Y+1	; 0x01
  cc:	3a 81       	ldd	r19, Y+2	; 0x02
  ce:	23 2f       	mov	r18, r19
  d0:	33 27       	eor	r19, r19
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
UBRR0L = (unsigned char)ubrr;
  d6:	89 e2       	ldi	r24, 0x29	; 41
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	29 81       	ldd	r18, Y+1	; 0x01
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
/* Enable receiver and transmitter */
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  e0:	8a e2       	ldi	r24, 0x2A	; 42
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	28 e1       	ldi	r18, 0x18	; 24
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
/* Set frame format: 8data, 2stop bit */
UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2e e8       	ldi	r18, 0x8E	; 142
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
}
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <transmitByte>:


void transmitByte(uint8_t data)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	1f 92       	push	r1
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	89 83       	std	Y+1, r24	; 0x01
   loop_until_bit_is_set(UCSR0A,UDRE0) ;
 10a:	8b e2       	ldi	r24, 0x2B	; 43
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	80 81       	ld	r24, Z
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	80 72       	andi	r24, 0x20	; 32
 118:	99 27       	eor	r25, r25
 11a:	89 2b       	or	r24, r25
 11c:	b1 f3       	breq	.-20     	; 0x10a <transmitByte+0xc>
   UDR0 = data;
 11e:	8c e2       	ldi	r24, 0x2C	; 44
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	29 81       	ldd	r18, Y+1	; 0x01
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
}
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <receiveByte>:

uint8_t receiveByte(void)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
    loop_until_bit_is_set(UCSR0A,RXC0);
 138:	8b e2       	ldi	r24, 0x2B	; 43
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	d4 f7       	brge	.-12     	; 0x138 <receiveByte+0x8>
    return UDR0;
 144:	8c e2       	ldi	r24, 0x2C	; 44
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	80 81       	ld	r24, Z
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <printString>:

void printString(const char myString[])
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	00 d0       	rcall	.+0      	; 0x158 <printString+0x6>
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	9b 83       	std	Y+3, r25	; 0x03
 160:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
 162:	19 82       	std	Y+1, r1	; 0x01
    while(myString[i])
 164:	0e c0       	rjmp	.+28     	; 0x182 <printString+0x30>
    {
        transmitByte(myString[i]);
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	2a 81       	ldd	r18, Y+2	; 0x02
 16e:	3b 81       	ldd	r19, Y+3	; 0x03
 170:	82 0f       	add	r24, r18
 172:	93 1f       	adc	r25, r19
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	0e 94 7f 00 	call	0xfe	; 0xfe <transmitByte>
        i++;
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	89 83       	std	Y+1, r24	; 0x01
}

void printString(const char myString[])
{
    uint8_t i = 0;
    while(myString[i])
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	88 2f       	mov	r24, r24
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	2a 81       	ldd	r18, Y+2	; 0x02
 18a:	3b 81       	ldd	r19, Y+3	; 0x03
 18c:	82 0f       	add	r24, r18
 18e:	93 1f       	adc	r25, r19
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	88 23       	and	r24, r24
 196:	39 f7       	brne	.-50     	; 0x166 <printString+0x14>
    {
        transmitByte(myString[i]);
        i++;
    }
}
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
